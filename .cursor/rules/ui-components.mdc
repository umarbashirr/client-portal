---
globs: *.tsx,*.ts,components/**/*
description: UI component development guidelines using shadcn/ui and Tailwind CSS
---

# UI Component Development Guidelines

## Component Structure and Organization

### File Organization

- Place components in `src/components/` directory
- Use lowercase with dashes for component directories (e.g., `auth-wizard/`, `invoice-builder/`)
- Group related components in subdirectories
- Export components from `index.ts` files for clean imports

### Component Structure

```typescript
// Component file structure
import { ComponentProps } from 'react'
import { cn } from '@/lib/utils'

interface ComponentProps {
  // Props definition
}

export function Component({ ...props }: ComponentProps) {
  // Component logic
  return (
    // JSX
  )
}

// Subcomponents
export function ComponentHeader() {
  // Subcomponent logic
}

// Types
export type { ComponentProps }
```

## shadcn/ui Integration

### Using shadcn/ui Components

- Always use shadcn/ui components as the foundation
- Extend components with custom functionality when needed
- Maintain consistent styling patterns across the application
- Use the `cn()` utility for conditional class merging

### Custom Component Examples

```typescript
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface CustomCardProps {
  title: string;
  children: React.ReactNode;
  className?: string;
}

export function CustomCard({ title, children, className }: CustomCardProps) {
  return (
    <Card className={cn("w-full", className)}>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>{children}</CardContent>
    </Card>
  );
}
```

## Tailwind CSS Guidelines

### Responsive Design

- Use mobile-first approach with Tailwind breakpoints
- Implement responsive utilities: `sm:`, `md:`, `lg:`, `xl:`, `2xl:`
- Test on multiple screen sizes as specified in [scope.md](mdc:scope.md)

### Color System

- Use CSS custom properties for consistent theming
- Implement dark mode support with `dark:` prefix
- Follow the design system from shadcn/ui

### Spacing and Layout

- Use consistent spacing scale (4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 80, 96)
- Implement proper grid and flexbox layouts
- Use `space-y-*` and `space-x-*` for consistent spacing

## Accessibility Guidelines

### Semantic HTML

- Use proper HTML semantic elements (`<main>`, `<section>`, `<article>`, `<header>`, `<footer>`)
- Implement proper heading hierarchy (h1, h2, h3, etc.)
- Use `<button>` for interactive elements, not `<div>`

### ARIA Attributes

- Add `aria-label` for icon-only buttons
- Use `aria-describedby` for form field descriptions
- Implement `aria-expanded` for collapsible content
- Use `aria-live` for dynamic content updates

### Keyboard Navigation

- Ensure all interactive elements are keyboard accessible
- Implement proper focus management
- Use `tabIndex` appropriately
- Provide visible focus indicators

### Screen Reader Support

- Use `aria-hidden="true"` for decorative elements
- Provide alternative text for images
- Use `role` attributes when necessary
- Implement proper form labels

## Form Components

### Form Structure

```typescript
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

const formSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
});

type FormData = z.infer<typeof formSchema>;

export function LoginForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit = (data: FormData) => {
    // Handle form submission
  };

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <Label htmlFor="email">Email</Label>
        <Input id="email" type="email" {...form.register("email")} />
        {form.formState.errors.email && (
          <p className="text-sm text-red-500">
            {form.formState.errors.email.message}
          </p>
        )}
      </div>
      <Button type="submit" className="w-full">
        Sign In
      </Button>
    </form>
  );
}
```

## State Management in Components

### Local State

- Use `useState` for simple local state
- Use `useReducer` for complex state logic
- Implement proper state updates with functional updates

### Global State

- Use Zustand for global state management
- Create custom hooks for state access
- Implement proper state persistence

### Server State

- Use TanStack Query for server state management
- Implement proper loading and error states
- Use optimistic updates where appropriate

## Performance Optimization

### Component Optimization

- Use `React.memo` for expensive components
- Implement `useMemo` and `useCallback` for expensive calculations
- Avoid unnecessary re-renders

### Code Splitting

- Use dynamic imports for large components
- Implement lazy loading for non-critical components
- Use Next.js dynamic imports

### Image Optimization

- Use Next.js `Image` component
- Implement proper alt text
- Use WebP format when possible
- Implement lazy loading

## Testing Guidelines

### Component Testing

- Write unit tests for all components
- Test user interactions and state changes
- Mock external dependencies
- Test accessibility features

### Test Structure

```typescript
import { render, screen, fireEvent } from "@testing-library/react";
import { Button } from "./button";

describe("Button Component", () => {
  it("renders with correct text", () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText("Click me")).toBeInTheDocument();
  });

  it("handles click events", () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    fireEvent.click(screen.getByText("Click me"));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

## Error Handling

### Error Boundaries

- Implement error boundaries for component error handling
- Provide fallback UI for error states
- Log errors for debugging

### Form Validation

- Use Zod for schema validation
- Display validation errors clearly
- Implement proper error states

### Loading States

- Implement loading indicators
- Use skeletons for content loading
- Provide proper loading feedback

## Documentation

### Component Documentation

- Use JSDoc comments for component props
- Document component usage examples
- Include accessibility notes
- Document any special requirements

### Storybook Integration

- Create stories for all components
- Document different component states
- Include accessibility testing
- Provide usage examples
